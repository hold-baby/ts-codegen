// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swagger v3 should handle basic schemas correctly 1`] = `
"export const addPet = createRequest<{
  requestBody: Pet;
}>(\\"addPet\\", ({ requestBody }) => ({
  url: \`/api/v2/pet\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createItem = createRequest<
  {
    requestBody?: Item;
  },
  Message
>(\\"createItem\\", ({ requestBody }) => ({
  url: \`/api/v2/items\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUser = createRequest<{
  requestBody: User;
}>(\\"createUser\\", ({ requestBody }) => ({
  url: \`/api/v2/user\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithArrayInput = createRequest<{
  requestBody: User[];
}>(\\"createUsersWithArrayInput\\", ({ requestBody }) => ({
  url: \`/api/v2/user/createWithArray\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithListInput = createRequest<{
  requestBody: User[];
}>(\\"createUsersWithListInput\\", ({ requestBody }) => ({
  url: \`/api/v2/user/createWithList\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deleteAttachmentUsingDelete = createRequest<{
  id: string;
}>(\\"deleteAttachmentUsingDelete\\", ({ id }) => ({ url: \`/api/v2/\${id}\`, method: \\"DELETE\\" }));

export const deleteOrder = createRequest<{
  orderId: number;
}>(\\"deleteOrder\\", ({ orderId }) => ({ url: \`/api/v2/store/order/\${orderId}\`, method: \\"DELETE\\" }));

export const deletePet = createRequest<{
  petId: number;
}>(\\"deletePet\\", ({ petId }) => ({ url: \`/api/v2/pet/\${petId}\`, method: \\"DELETE\\" }));

export const deleteUser = createRequest<{
  username: string;
}>(\\"deleteUser\\", ({ username }) => ({ url: \`/api/v2/user/\${username}\`, method: \\"DELETE\\" }));

export const downloadUsingGet = createRequest<
  {
    id: string;
  },
  Resource
>(\\"downloadUsingGet\\", ({ id }) => ({ url: \`/api/v2/\${id}\`, method: \\"GET\\" }));

export const findBookByIdUsingGet = createRequest<
  {
    id: string;
  },
  BookDetailVo
>(\\"findBookByIdUsingGet\\", ({ id }) => ({ url: \`/api/v2/book/\${id}\`, method: \\"GET\\" }));

export const findPetsByStatus = createRequest<
  {
    status: (keyof typeof FindPetsByStatusStatus)[];
  },
  Pet[]
>(\\"findPetsByStatus\\", ({ status }) => ({
  url: \`/api/v2/pet/findByStatus\`,
  method: \\"GET\\",
  params: {
    status,
  },
}));

/**
 * @deprecated findPetsByTags
 */
export const findPetsByTags = createRequest<
  {
    tags: string[];
  },
  Pet[]
>(\\"findPetsByTags\\", ({ tags }) => ({
  url: \`/api/v2/pet/findByTags\`,
  method: \\"GET\\",
  params: {
    tags,
  },
}));

export const getAgencyResponseListUsingGet = createRequest<
  {
    addressType: keyof typeof GetAgencyResponseListUsingGetAddressType;
  },
  Resource[]
>(\\"getAgencyResponseListUsingGet\\", ({ addressType }) => ({
  url: \`/api/v2/agency-responses\`,
  method: \\"GET\\",
  params: {
    addressType,
  },
}));

export const getAgencyResponseUsingGet = createRequest<
  {
    addressType: keyof typeof GetAgencyResponseUsingGetAddressType;
    responseDate: string;
  },
  Resource
>(\\"getAgencyResponseUsingGet\\", ({ responseDate, addressType }) => ({
  url: \`/api/v2/agency-response\`,
  method: \\"GET\\",
  params: {
    responseDate,
    addressType,
  },
}));

export const getDocumentByIdUsingGet = createRequest<
  {
    documentId: string;
    from?: CarTypeEnum;
  },
  DocumentVo
>(\\"getDocumentByIdUsingGet\\", ({ documentId, from }) => ({
  url: \`/api/v2/documents/\${documentId}/doc\`,
  method: \\"GET\\",
  params: {
    from,
  },
}));

export const getHealthCheckUsingHead = createRequest<
  {
    flight_no: string;
  },
  DocumentVo
>(\\"getHealthCheckUsingHead\\", ({ flight_no }) => ({ url: \`/api/v2/health-check/\${flight_no}\`, method: \\"HEAD\\" }));

export const getInventory = createRequest<undefined, { [key: string]: number }>(\\"getInventory\\", () => ({
  url: \`/api/v2/store/inventory\`,
  method: \\"GET\\",
}));

export const getItems = createRequest<
  {
    limit?: number;
    page?: number;
    sort?: string[];
  },
  Items
>(\\"getItems\\", ({ page, limit, sort }) => ({
  url: \`/api/v2/items\`,
  method: \\"GET\\",
  params: {
    page,
    limit,
    sort,
  },
}));

export const getOrderById = createRequest<
  {
    orderId: number;
  },
  Order
>(\\"getOrderById\\", ({ orderId }) => ({ url: \`/api/v2/store/order/\${orderId}\`, method: \\"GET\\" }));

export const getPetById = createRequest<
  {
    petId: number;
  },
  Pet
>(\\"getPetById\\", ({ petId }) => ({ url: \`/api/v2/pet/\${petId}\`, method: \\"GET\\" }));

export const getScheduleDetailsByDateUsingGet = createRequest<
  {
    roleId?: string;
    scheduleDate: number;
  },
  ScheduleVo[]
>(\\"getScheduleDetailsByDateUsingGet\\", ({ scheduleDate, roleId }) => ({
  url: \`/api/v2/schedules\`,
  method: \\"GET\\",
  params: {
    scheduleDate,
    roleId,
  },
}));

export const getTeamListByUsingGet = createRequest<{
  limit?: number;
  offset?: number;
}>(\\"getTeamListByUsingGet\\", ({ offset, limit }) => ({
  url: \`/api/v2/teams\`,
  method: \\"GET\\",
  params: {
    offset,
    limit,
  },
}));

export const getUserByName = createRequest<
  {
    username: string;
  },
  User
>(\\"getUserByName\\", ({ username }) => ({ url: \`/api/v2/user/\${username}\`, method: \\"GET\\" }));

export const getUserListByUsingGet = createRequest<{
  limit?: number;
  offset?: number;
}>(\\"getUserListByUsingGet\\", ({ offset, limit }) => ({
  url: \`/api/v2/users\`,
  method: \\"GET\\",
  params: {
    offset,
    limit,
  },
}));

export const loginUser = createRequest<
  {
    password: string;
    username: string;
  },
  string
>(\\"loginUser\\", ({ username, password }) => ({
  url: \`/api/v2/user/login\`,
  method: \\"GET\\",
  params: {
    username,
    password,
  },
}));

export const logoutUser = createRequest(\\"logoutUser\\", () => ({ url: \`/api/v2/user/logout\`, method: \\"GET\\" }));

export const placeOrder = createRequest<
  {
    requestBody: Order;
  },
  Order
>(\\"placeOrder\\", ({ requestBody }) => ({
  url: \`/api/v2/store/order\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updateBookByIdUsingPut = createRequest<{
  id: string;
  requestBody: UpdateBookRequest;
}>(\\"updateBookByIdUsingPut\\", ({ id, requestBody }) => ({
  url: \`/api/v2/book/\${id}\`,
  method: \\"PUT\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePet = createRequest<{
  requestBody: Pet;
}>(\\"updatePet\\", ({ requestBody }) => ({
  url: \`/api/v2/pet\`,
  method: \\"PUT\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePetWithForm = createRequest<{
  petId: number;
  requestBody?: { name?: string; status?: string };
}>(\\"updatePetWithForm\\", ({ petId, requestBody }) => ({
  url: \`/api/v2/pet/\${petId}\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/x-www-form-urlencoded\\" },
}));

export const updateUser = createRequest<{
  requestBody: User;
  username: string;
}>(\\"updateUser\\", ({ username, requestBody }) => ({
  url: \`/api/v2/user/\${username}\`,
  method: \\"PUT\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadAttachmentUsingPost = createRequest<
  {
    requestBody?: { attachment: Blob };
  },
  AttachmentBo
>(\\"uploadAttachmentUsingPost\\", ({ requestBody }) => ({
  url: \`/api/v2\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const uploadFile = createRequest<
  {
    petId: number;
    requestBody?: { additionalMetadata?: string; file?: Blob };
  },
  ApiResponse
>(\\"uploadFile\\", ({ petId, requestBody }) => ({
  url: \`/api/v2/pet/\${petId}/uploadImage\`,
  method: \\"POST\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export interface ApiResponse {
  code?: number;
  message?: string;
  type?: string;
}

export interface AttachmentBo {
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface BookDetailVo {
  attachment?: ScheduleVo;
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface BookVo {
  address?: string;
  price?: string;
}

export interface BookingResponse {
  data: DocumentVo;
  errors?: ErrorInfo[];
}

export enum CarTypeEnum {
  \\"BMW\\" = \\"BMW\\",
  \\"Audi\\" = \\"Audi\\",
  \\"BYD\\" = \\"BYD\\",
}

export interface Category {
  id?: number;
  name?: string;
}

export interface Dictionary {
  category?: Category;
  dictionary1?: { age: number; name: string; [key: string]: string | number };
  dictionary2?: { age: string; name: string; [key: string]: string };
  dictionary3?: { age?: number; name?: string; [key: string]: any };
  dictionary4?: { [key: string]: any };
  dictionary?: { [key: string]: { code?: number; text?: string } };
  id?: number;
  name: string;
  photoUrls: string[];
  status?: keyof typeof DictionaryStatus;
  tags?: Tag[];
}

export enum DictionaryStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export interface DocumentVo {
  attachment?: BookDetailVo;
  authorName?: string;
  createdDate?: number;
  id?: string;
  note?: string;
  title?: string;
}

export interface Error {
  code?: number;
  field?: string;
  message?: string;
}

export interface ErrorInfo {
  errorMessage?: string;
}

export type Errors = Error[];

export interface File {
  absolute?: boolean;
  absoluteFile?: File;
  absolutePath?: string;
  canonicalFile?: File;
  canonicalPath?: string;
  directory?: boolean;
  executable?: boolean;
  file?: boolean;
  freeSpace?: number;
  hidden?: boolean;
  lastModified?: number;
  name?: string;
  parent?: string;
  parentFile?: File;
  path?: string;
  readable?: boolean;
  totalSpace?: number;
  usableSpace?: number;
  writable?: boolean;
}

export enum FindPetsByStatusStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export enum GetAgencyResponseListUsingGetAddressType {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export enum GetAgencyResponseUsingGetAddressType {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export interface InputStream {
  [key: string]: any;
}

export interface Item {
  color?: string;
  id?: string;
  name?: string;
  price?: string;
}

export type Items = Item[];

export interface Message {
  message?: string;
}

export interface Order {
  complete?: boolean;
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  status?: keyof typeof OrderStatus;
}

export enum OrderStatus {
  \\"placed\\" = \\"placed\\",
  \\"approved\\" = \\"approved\\",
  \\"delivered\\" = \\"delivered\\",
}

export interface Pet {
  category?: Category;
  id?: number;
  name: string;
  photoUrls: string[];
  status?: keyof typeof PetStatus;
  tags?: Tag[];
}

export enum PetStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export interface Resource {
  description?: string;
  file?: File;
  filename?: string;
  inputStream?: InputStream;
  open?: boolean;
  readable?: boolean;
  uri?: Uri;
  url?: Url;
}

export interface ScheduleVo {
  contentType?: ScheduleVoContentType;
  reason?: ScheduleVoReason;
  schedules?: BookVo[][];
  shiftId?: string;
  team?: string;
}

export type ScheduleVoContentType = \\"01\\" | \\"02\\" | \\"03\\" | \\"04\\" | \\"05\\" | \\"06\\";

export type ScheduleVoReason = \\"1\\" | \\"3\\" | \\"4\\" | \\"5\\" | \\"6\\";

export interface Tag {
  id?: number;
  name?: string;
}

export interface UpdateBookRequest {
  birthCountry?: string;
  citizenship?: string;
  dateOfBirth?: number;
  employmentStatus?: string;
  ethnicity?: string;
  gender?: string;
  idNumber?: string;
  idType?: string;
  roleId?: string;
  spokenLanguage?: string[];
}

export interface Uri {
  absolute?: boolean;
  authority?: string;
  fragment?: string;
  host?: string;
  opaque?: boolean;
  path?: string;
  port?: number;
  query?: string;
  rawAuthority?: string;
  rawFragment?: string;
  rawPath?: string;
  rawQuery?: string;
  rawSchemeSpecificPart?: string;
  rawUserInfo?: string;
  scheme?: string;
  schemeSpecificPart?: string;
  userInfo?: string;
}

export interface Url {
  authority?: string;
  content?: { [key: string]: any };
  defaultPort?: number;
  deserializedFields?: UrlStreamHandler;
  file?: string;
  host?: string;
  path?: string;
  port?: number;
  protocol?: string;
  query?: string;
  ref?: string;
  serializedHashCode?: number;
  userInfo?: string;
}

export interface UrlStreamHandler {
  [key: string]: any;
}

export interface User {
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  userStatus?: number;
  username?: string;
}

export interface ValidationError {
  errors?: Errors;
  message?: string;
}
"
`;
