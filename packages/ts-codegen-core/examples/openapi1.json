{
  "openapi": "3.0.0",
  "info": {
    "description": "Api Documentation",
    "version": "1.0",
    "title": "Api Documentation",
    "termsOfService": "urn:tos",
    "contact": {},
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    }
  },
  "tags": [
    {
      "name": "attachment-controller",
      "description": "Test Controller"
    },
    {
      "name": "attachment-controller-2",
      "description": "Test Controller 2"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "tags": ["mock-controller"],
        "summary": "uploadAttachment",
        "operationId": "uploadAttachmentUsingPOST",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "attachment": {
                    "description": "attachment",
                    "type": "string",
                    "format": "binary"
                  }
                },
                "required": ["attachment"]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentBO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/{id}": {
      "get": {
        "tags": ["attachment-controller"],
        "summary": "download",
        "operationId": "downloadUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": ["attachment-controller"],
        "summary": "delete attachment by id",
        "operationId": "deleteAttachmentUsingDELETE",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Can not find attachment with specific id: {id}"
          }
        },
        "deprecated": false
      }
    },
    "/book/{id}": {
      "get": {
        "tags": ["book-controller"],
        "summary": "get book by id",
        "operationId": "findBookByIdUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "request param for find book",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BookDetailVo"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": ["book-controller"],
        "summary": "update book by given id",
        "operationId": "updateBookByIdUsingPUT",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "given book id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBookRequest"
              }
            }
          },
          "description": "update request body",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/schedules": {
      "get": {
        "tags": ["schedule-controller"],
        "summary": "getScheduleDetailsByDate",
        "operationId": "getScheduleDetailsByDateUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "scheduleDate",
            "in": "query",
            "description": "scheduleDate",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "roleId",
            "required": false,
            "allowEmptyValue": false,
            "example": "111111111",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ScheduleVO"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/documents/{documentId}/doc": {
      "get": {
        "tags": ["documents-controller"],
        "summary": "getDocument",
        "operationId": "getDocumentByIdUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "abc123456789"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John Hopkins"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "from",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/CarTypeEnum"
                },
                {
                  "x-go-field-name": "AccountIdentityType",
                  "x-tag-name": "accountIdentityType"
                }
              ]
            }
          },
          {
            "name": "documentId",
            "in": "path",
            "description": "documentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "206": {
            "description": "partial content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentVO"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/health-check/{flight_no}": {
      "head": {
        "operationId": "getHealthCheckUsingHEAD",
        "description": "show flight exist or not.",
        "parameters": [
          {
            "name": "flight_no",
            "in": "path",
            "description": "Flight_no",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "flight exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentVO"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentVO"
                }
              }
            }
          },
          "404": {
            "description": "flight does not exist"
          }
        }
      }
    },
    "/users": {
      "get": {
        "summary": "Gets a list of users.",
        "operationId": "getUserListByUsingGET",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/teams": {
      "get": {
        "summary": "Gets a list of teams.",
        "operationId": "getTeamListByUsingGET",
        "parameters": [
          {
            "$ref": "#/components/parameters/offsetParam"
          },
          {
            "$ref": "#/components/parameters/limitParam"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/items": {
      "x-swagger-router-controller": "ItemController",
      "get": {
        "summary": "Returns a list of items",
        "operationId": "getItems",
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Pagination-Count": {
                "description": "Total number of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Page": {
                "description": "Current page number",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Limit": {
                "description": "Number of returned items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Items"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "429": {
            "$ref": "#/components/responses/429TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/503ServiceUnavailable"
          }
        }
      },
      "post": {
        "summary": "Creates a new item",
        "operationId": "createItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Item"
              }
            }
          },
          "description": "An item"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/SuccessMessage"
          },
          "400": {
            "$ref": "#/components/responses/400BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/401Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/403Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/404NotFound"
          },
          "409": {
            "$ref": "#/components/responses/409Conflict"
          },
          "429": {
            "$ref": "#/components/responses/429TooManyRequests"
          },
          "500": {
            "$ref": "#/components/responses/500InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/503ServiceUnavailable"
          }
        }
      }
    },
    "/pet": {
      "post": {
        "tags": ["pet"],
        "summary": "Add a new pet to the store",
        "description": "",
        "operationId": "addPet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": []
      },
      "put": {
        "tags": ["pet"],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "requestBody": {
          "$ref": "#/components/requestBodies/Pet"
        },
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": []
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["available", "pending", "sold"],
                "default": "available"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": []
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Test deprecated request",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a pet when ID < 10.  ID > 10 or nonintegers will simulate API error conditions",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": []
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "description": "Updated name of the pet",
                    "type": "string"
                  },
                  "status": {
                    "description": "Updated status of the pet",
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": []
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "description": "",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "security": []
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": ["pet"],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "additionalMetadata": {
                    "description": "Additional data to pass to server",
                    "type": "string"
                  },
                  "file": {
                    "description": "file to upload",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/store/inventory": {
      "get": {
        "tags": ["store"],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        },
        "security": []
      }
    },
    "/store/order": {
      "post": {
        "tags": ["store"],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "description": "order placed for purchasing the pet",
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": ["store"],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "operationId": "getOrderById",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1,
              "maximum": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": ["store"],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Created user object",
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": ["user"],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "$ref": "#/components/requestBodies/UserArray"
        },
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": ["user"],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "examples": {
                  "response": {
                    "value": {
                      "id": 1,
                      "username": "johnp",
                      "firstName": "John",
                      "lastName": "Public",
                      "email": "johnp@swagger.io",
                      "password": "-secret-",
                      "phone": "0123456789",
                      "userStatus": 0
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "description": "Updated user object",
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/agency-response": {
      "get": {
        "tags": ["controller"],
        "summary": "getAgencyResponse",
        "operationId": "getAgencyResponseUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "123"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John"
            }
          },
          {
            "name": "responseDate",
            "in": "query",
            "description": "responseDate",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "addressType",
            "in": "query",
            "description": "addressType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["AAA", "BBB"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Resource"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    },
    "/agency-responses": {
      "get": {
        "tags": ["controller"],
        "summary": "getAgencyResponseList",
        "operationId": "getAgencyResponseListUsingGET",
        "parameters": [
          {
            "name": "Authorities",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "a_officer"
            }
          },
          {
            "name": "User-Id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "123"
            }
          },
          {
            "name": "User-Name",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "default": "John"
            }
          },
          {
            "name": "addressType",
            "in": "query",
            "description": "addressType",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["AAA", "BBB"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Resource"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        },
        "deprecated": false
      }
    }
  },
  "servers": [
    {
      "url": "/api/v2"
    }
  ],
  "components": {
    "parameters": {
      "offsetParam": {
        "in": "query",
        "name": "offset",
        "required": false,
        "description": "The number of items to skip before starting to collect the result set.",
        "schema": {
          "type": "integer",
          "minimum": 0
        }
      },
      "limitParam": {
        "in": "query",
        "name": "limit",
        "required": false,
        "description": "The numbers of items to return.",
        "schema": {
          "type": "integer",
          "minimum": 1,
          "maximum": 50,
          "default": 20
        }
      },
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "description": "Item id",
        "schema": {
          "type": "string"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "Current page number",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "description": "Limits the number of returned items",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 10,
          "maximum": 100,
          "multipleOf": 10,
          "default": 10
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "required": false,
        "description": "Sorting order of items",
        "style": "pipeDelimited",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "([+-]\\w*){1}(\\|[+-]\\w*){0,5}",
            "default": "+name"
          },
          "minItems": 1,
          "maxItems": 6,
          "uniqueItems": true
        }
      }
    },
    "responses": {
      "SuccessMessage": {
        "description": "Success",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "400BadRequest": {
        "description": "The request was invalid or cannot be otherwise served.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/ValidationError"
            }
          }
        }
      },
      "401Unauthorized": {
        "description": "Authentication credentials were missing or incorrect.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "403Forbidden": {
        "description": "The request is understood, but it has been refused or access is not allowed.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "404NotFound": {
        "description": "The URI requested is invalid or the resource requested does not exists.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "409Conflict": {
        "description": "Any message which should help the user to resolve the conflict.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "429TooManyRequests": {
        "description": "The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "500InternalServerError": {
        "description": "Something is broken.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "503ServiceUnavailable": {
        "description": "The server is up, but overloaded with requests. Try again later.",
        "content": {
          "*/*": {
            "schema": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "List of user object",
        "required": true
      },
      "Pet": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        },
        "description": "Pet object that needs to be added to the store",
        "required": true
      }
    },
    "schemas": {
      "BookDetailVo": {
        "type": "object",
        "properties": {
          "authorName": {
            "type": "string",
            "example": "Tony"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64",
            "example": 19920010
          },
          "fileName": {
            "type": "string",
            "example": "aaa"
          },
          "id": {
            "type": "string",
            "example": "001"
          },
          "mimeType": {
            "type": "string",
            "example": ".png"
          },
          "path": {
            "type": "string",
            "example": "/home"
          },
          "attachment": {
            "$ref": "#/components/schemas/ScheduleVO"
          }
        },
        "title": "BookDetailVo"
      },
      "ScheduleVO": {
        "type": "object",
        "properties": {
          "team": {
            "type": "string"
          },
          "contentType": {
            "description": "Should generate type instead of enum, when enum value is number like.",
            "type": "string",
            "enum": ["01", "02", "03", "04", "05", "06"]
          },
          "reason": {
            "description": "Should generate type instead of enum, when enum value is number like.",
            "type": "string",
            "enum": ["1", "3", "4", "5", "6"]
          },
          "schedules": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BookVO"
              }
            }
          },
          "shiftId": {
            "type": "string"
          }
        },
        "title": "ScheduleVO"
      },
      "BookVO": {
        "type": "object",
        "properties": {
          "price": {
            "type": "string"
          },
          "address": {
            "type": "string"
          }
        },
        "title": "BookVO"
      },
      "InputStream": {
        "type": "object",
        "title": "InputStream"
      },
      "Resource": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "file": {
            "$ref": "#/components/schemas/File"
          },
          "filename": {
            "type": "string"
          },
          "inputStream": {
            "$ref": "#/components/schemas/InputStream"
          },
          "open": {
            "type": "boolean"
          },
          "readable": {
            "type": "boolean"
          },
          "uri": {
            "$ref": "#/components/schemas/URI"
          },
          "url": {
            "$ref": "#/components/schemas/URL"
          }
        },
        "title": "Resource"
      },
      "URI": {
        "type": "object",
        "properties": {
          "absolute": {
            "type": "boolean"
          },
          "authority": {
            "type": "string"
          },
          "fragment": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "opaque": {
            "type": "boolean"
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "query": {
            "type": "string"
          },
          "rawAuthority": {
            "type": "string"
          },
          "rawFragment": {
            "type": "string"
          },
          "rawPath": {
            "type": "string"
          },
          "rawQuery": {
            "type": "string"
          },
          "rawSchemeSpecificPart": {
            "type": "string"
          },
          "rawUserInfo": {
            "type": "string"
          },
          "scheme": {
            "type": "string"
          },
          "schemeSpecificPart": {
            "type": "string"
          },
          "userInfo": {
            "type": "string"
          }
        },
        "title": "URI"
      },
      "URL": {
        "type": "object",
        "properties": {
          "authority": {
            "type": "string"
          },
          "content": {
            "type": "object"
          },
          "defaultPort": {
            "type": "integer",
            "format": "int32"
          },
          "deserializedFields": {
            "$ref": "#/components/schemas/URLStreamHandler"
          },
          "file": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "port": {
            "type": "integer",
            "format": "int32"
          },
          "protocol": {
            "type": "string"
          },
          "query": {
            "type": "string"
          },
          "ref": {
            "type": "string"
          },
          "serializedHashCode": {
            "type": "integer",
            "format": "int32"
          },
          "userInfo": {
            "type": "string"
          }
        },
        "title": "URL"
      },
      "URLStreamHandler": {
        "type": "object",
        "title": "URLStreamHandler"
      },
      "UpdateBookRequest": {
        "type": "object",
        "properties": {
          "birthCountry": {
            "type": "string",
            "example": "CN"
          },
          "citizenship": {
            "type": "string",
            "example": "A"
          },
          "roleId": {
            "type": "string"
          },
          "dateOfBirth": {
            "type": "integer",
            "format": "int64",
            "example": "1992-10-10T00:00:00.000Z"
          },
          "employmentStatus": {
            "type": "string",
            "example": "EMP001"
          },
          "ethnicity": {
            "type": "string",
            "example": "CN"
          },
          "gender": {
            "type": "string",
            "example": "F"
          },
          "idNumber": {
            "type": "string",
            "example": "S6362682T"
          },
          "idType": {
            "type": "string",
            "example": "FD"
          },
          "spokenLanguage": {
            "type": "array",
            "example": ["AH", "AK"],
            "items": {
              "type": "string"
            }
          }
        },
        "title": "UpdateBookRequest"
      },
      "DocumentVO": {
        "type": "object",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/BookDetailVo"
          },
          "authorName": {
            "type": "string"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64"
          },
          "id": {
            "type": "string"
          },
          "note": {
            "type": "string"
          },
          "title": {
            "type": "string"
          }
        },
        "title": "DocumentVO"
      },
      "AttachmentBO": {
        "type": "object",
        "properties": {
          "authorName": {
            "type": "string"
          },
          "createdDate": {
            "type": "integer",
            "format": "int64"
          },
          "fileName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "mimeType": {
            "type": "string"
          },
          "path": {
            "type": "string"
          }
        },
        "title": "AttachmentBO"
      },
      "File": {
        "type": "object",
        "properties": {
          "absolute": {
            "type": "boolean"
          },
          "absoluteFile": {
            "$ref": "#/components/schemas/File"
          },
          "absolutePath": {
            "type": "string"
          },
          "canonicalFile": {
            "$ref": "#/components/schemas/File"
          },
          "canonicalPath": {
            "type": "string"
          },
          "directory": {
            "type": "boolean"
          },
          "executable": {
            "type": "boolean"
          },
          "file": {
            "type": "boolean"
          },
          "freeSpace": {
            "type": "integer",
            "format": "int64"
          },
          "hidden": {
            "type": "boolean"
          },
          "lastModified": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "parent": {
            "type": "string"
          },
          "parentFile": {
            "$ref": "#/components/schemas/File"
          },
          "path": {
            "type": "string"
          },
          "readable": {
            "type": "boolean"
          },
          "totalSpace": {
            "type": "integer",
            "format": "int64"
          },
          "usableSpace": {
            "type": "integer",
            "format": "int64"
          },
          "writable": {
            "type": "boolean"
          }
        },
        "title": "File"
      },
      "BookingResponse": {
        "type": "object",
        "required": ["data"],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/DocumentVO"
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorInfo"
            }
          }
        },
        "title": "BookingResponse"
      },
      "ErrorInfo": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          }
        },
        "title": "ErrorInfo"
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "name": {
            "type": "string"
          },
          "price": {
            "type": "string"
          },
          "color": {
            "type": "string"
          }
        }
      },
      "Items": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Item"
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          },
          "field": {
            "type": "string"
          }
        }
      },
      "Errors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Error"
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "errors": {
            "$ref": "#/components/schemas/Errors"
          }
        }
      },
      "User": {
        "description": "Without type=object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Category": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "Pet": {
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "Tag": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Order": {
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": ["placed", "approved", "delivered"]
          },
          "complete": {
            "type": "boolean"
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Dictionary": {
        "type": "object",
        "required": ["name", "photoUrls"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "photoUrls": {
            "type": "array",
            "xml": {
              "name": "photoUrl",
              "wrapped": true
            },
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "xml": {
              "name": "tag",
              "wrapped": true
            },
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "type": "string",
            "description": "pet status in the store",
            "enum": ["available", "pending", "sold"]
          },
          "dictionary": {
            "type": "object",
            "description": "Object only contains additional properties",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "text": {
                  "type": "string"
                }
              }
            }
          },
          "dictionary1": {
            "type": "object",
            "description": "Object contains both properties and additional properties",
            "required": ["name", "age"],
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "number"
              }
            },
            "additionalProperties": {
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                }
              ]
            }
          },
          "dictionary2": {
            "type": "object",
            "description": "Additional properties is not an object",
            "required": ["name", "age"],
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "string"
              }
            },
            "additionalProperties": {
              "type": "string"
            }
          },
          "dictionary3": {
            "type": "object",
            "description": "Additional properties is a boolean",
            "properties": {
              "name": {
                "type": "string"
              },
              "age": {
                "type": "number"
              }
            },
            "additionalProperties": true
          },
          "dictionary4": {
            "type": "object",
            "description": "Additional properties is a boolean and without properties",
            "additionalProperties": true
          }
        },
        "xml": {
          "name": "Pet"
        }
      },
      "CarTypeEnum": {
        "type": "string",
        "enum": ["BMW", "Audi", "BYD"]
      }
    }
  }
}
