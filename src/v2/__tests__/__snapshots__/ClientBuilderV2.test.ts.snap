// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PathResolver should get correct action creator by resolved paths 1`] = `
"export const deleteAttachmentUsingDELETE = createRequestAction<{
  id: string;
}>(\\"deleteAttachmentUsingDELETE\\", ({ id }) => ({ url: \`/api/test/\${id}\`, method: \\"delete\\" }));

export const downloadUsingGET = createRequestAction<
  {
    id: string;
  },
  Resource
>(\\"downloadUsingGET\\", ({ id }) => ({ url: \`/api/test/\${id}\`, method: \\"get\\" }));

export const findBookByIdUsingGET = createRequestAction<
  {
    id: string;
  },
  BookDetailVo
>(\\"findBookByIdUsingGET\\", ({ id }) => ({ url: \`/api/test/book/\${id}\`, method: \\"get\\" }));

export const getDocumentByIdUsingGET = createRequestAction<
  {
    documentId: string;
    from?: keyof typeof FromFrom;
  },
  DocumentVo
>(\\"getDocumentByIdUsingGET\\", ({ documentId, from }) => ({
  url: \`/api/test/documents/\${documentId}/doc\`,
  method: \\"get\\",
  params: {
    from,
  },
}));

export const getScheduleDetailsByDateUsingGET = createRequestAction<
  {
    roleId?: string;
    scheduleDate: number;
  },
  ScheduleVo[]
>(\\"getScheduleDetailsByDateUsingGET\\", ({ scheduleDate, roleId }) => ({
  url: \`/api/test/schedules\`,
  method: \\"get\\",
  params: {
    scheduleDate,
    roleId,
  },
}));

export const updateBookByIdUsingPUT = createRequestAction<{
  id: string;
  updateBookRequest: UpdateBookRequest;
}>(\\"updateBookByIdUsingPUT\\", ({ id, updateBookRequest }) => ({
  url: \`/api/test/book/\${id}\`,
  method: \\"put\\",
  data: updateBookRequest,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadAttachmentUsingPOST = createRequestAction<
  {
    attachment: File;
  },
  AttachmentBo
>(\\"uploadAttachmentUsingPOST\\", ({ attachment }) => ({
  url: \`/api/test\`,
  method: \\"post\\",
  data: attachment,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));
export enum FromFrom {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}
"
`;

exports[`PathResolver should handle multiple form data in response 1`] = `
"export const addPet = createRequestAction<{
  body: Pet;
}>(\\"addPet\\", ({ body }) => ({
  url: \`/api/test/pet\`,
  method: \\"post\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUser = createRequestAction<{
  body: User;
}>(\\"createUser\\", ({ body }) => ({
  url: \`/api/test/user\`,
  method: \\"post\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithArrayInput = createRequestAction<{
  body: User[];
}>(\\"createUsersWithArrayInput\\", ({ body }) => ({
  url: \`/api/test/user/createWithArray\`,
  method: \\"post\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithListInput = createRequestAction<{
  body: User[];
}>(\\"createUsersWithListInput\\", ({ body }) => ({
  url: \`/api/test/user/createWithList\`,
  method: \\"post\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deleteOrder = createRequestAction<{
  orderId: number;
}>(\\"deleteOrder\\", ({ orderId }) => ({ url: \`/api/test/store/order/\${orderId}\`, method: \\"delete\\" }));

export const deletePet = createRequestAction<{
  petId: number;
}>(\\"deletePet\\", ({ petId }) => ({ url: \`/api/test/pet/\${petId}\`, method: \\"delete\\" }));

export const deleteUser = createRequestAction<{
  username: string;
}>(\\"deleteUser\\", ({ username }) => ({ url: \`/api/test/user/\${username}\`, method: \\"delete\\" }));

export const findPetsByStatus = createRequestAction<
  {
    status: keyof typeof StatusStatus[];
  },
  Pet[]
>(\\"findPetsByStatus\\", ({ status }) => ({
  url: \`/api/test/pet/findByStatus\`,
  method: \\"get\\",
  params: {
    status,
  },
}));

/**
 * @deprecated findPetsByTags
 */

export const findPetsByTags = createRequestAction<
  {
    tags: string[];
  },
  Pet[]
>(\\"findPetsByTags\\", ({ tags }) => ({
  url: \`/api/test/pet/findByTags\`,
  method: \\"get\\",
  params: {
    tags,
  },
}));

export const getInventory = createRequestAction<undefined, object>(\\"getInventory\\", () => ({
  url: \`/api/test/store/inventory\`,
  method: \\"get\\",
}));

export const getOrderById = createRequestAction<
  {
    orderId: number;
  },
  Order
>(\\"getOrderById\\", ({ orderId }) => ({ url: \`/api/test/store/order/\${orderId}\`, method: \\"get\\" }));

export const getPetById = createRequestAction<
  {
    petId: number;
  },
  Pet
>(\\"getPetById\\", ({ petId }) => ({ url: \`/api/test/pet/\${petId}\`, method: \\"get\\" }));

export const getUserByName = createRequestAction<
  {
    username: string;
  },
  User
>(\\"getUserByName\\", ({ username }) => ({ url: \`/api/test/user/\${username}\`, method: \\"get\\" }));

export const loginUser = createRequestAction<
  {
    password: string;
    username: string;
  },
  string
>(\\"loginUser\\", ({ username, password }) => ({
  url: \`/api/test/user/login\`,
  method: \\"get\\",
  params: {
    username,
    password,
  },
}));

export const logoutUser = createRequestAction<undefined>(\\"logoutUser\\", () => ({
  url: \`/api/test/user/logout\`,
  method: \\"get\\",
}));

export const placeOrder = createRequestAction<
  {
    body: Order;
  },
  Order
>(\\"placeOrder\\", ({ body }) => ({
  url: \`/api/test/store/order\`,
  method: \\"post\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePet = createRequestAction<{
  body: Pet;
}>(\\"updatePet\\", ({ body }) => ({
  url: \`/api/test/pet\`,
  method: \\"put\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePetWithForm = createRequestAction<{
  name?: string;
  petId: number;
  status?: string;
}>(\\"updatePetWithForm\\", ({ petId, name, status }) => ({
  url: \`/api/test/pet/\${petId}\`,
  method: \\"post\\",
  data: { name, status },
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const updateUser = createRequestAction<{
  body: User;
  username: string;
}>(\\"updateUser\\", ({ username, body }) => ({
  url: \`/api/test/user/\${username}\`,
  method: \\"put\\",
  data: body,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadFile = createRequestAction<
  {
    additionalMetadata?: string;
    file?: File;
    petId: number;
  },
  ApiResponse
>(\\"uploadFile\\", ({ petId, additionalMetadata, file }) => ({
  url: \`/api/test/pet/\${petId}/uploadImage\`,
  method: \\"post\\",
  data: { additionalMetadata, file },
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));
export enum StatusStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}
"
`;
