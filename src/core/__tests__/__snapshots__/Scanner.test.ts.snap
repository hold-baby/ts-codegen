// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swagger v2 should handle spec correctly 1`] = `
"export const createItem = createRequestAction<
  {
    requestBody: {
      item?: IItem;
    };
  },
  IMessage
>(\\"createItem\\", ({ requestBody }) => ({
  url: \`/api/test/items\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deleteAttachmentUsingDelete = createRequestAction<{
  id: string;
}>(\\"deleteAttachmentUsingDelete\\", ({ id }) => ({ url: \`/api/test/\${id}\`, method: \\"delete\\" }));

export const downloadUsingGet = createRequestAction<
  {
    id: string;
  },
  IResource
>(\\"downloadUsingGet\\", ({ id }) => ({ url: \`/api/test/\${id}\`, method: \\"get\\" }));

export const findBookByIdUsingGet = createRequestAction<
  {
    id: string;
  },
  IBookDetailVo
>(\\"findBookByIdUsingGet\\", ({ id }) => ({ url: \`/api/test/book/\${id}\`, method: \\"get\\" }));

export const getDocumentByIdUsingGet = createRequestAction<
  {
    documentId: string;
    from?: keyof typeof GetDocumentByIdUsingGetFrom;
  },
  IDocumentVo
>(\\"getDocumentByIdUsingGet\\", ({ documentId, from }) => ({
  url: \`/api/test/documents/\${documentId}/doc\`,
  method: \\"get\\",
  params: {
    from,
  },
}));

export const getHealthCheckUsingHead = createRequestAction<
  {
    flight_no: string;
  },
  IDocumentVo
>(\\"getHealthCheckUsingHead\\", ({ flight_no }) => ({ url: \`/api/test/health-check\`, method: \\"head\\" }));

export const getItems = createRequestAction<
  {
    limit?: number;
    page?: number;
    sort?: string[];
  },
  TItems
>(\\"getItems\\", ({ page, limit, sort }) => ({
  url: \`/api/test/items\`,
  method: \\"get\\",
  params: {
    page,
    limit,
    sort,
  },
}));

export const getScheduleDetailsByDateUsingGet = createRequestAction<
  {
    roleId?: string;
    scheduleDate: number;
  },
  IScheduleVo[]
>(\\"getScheduleDetailsByDateUsingGet\\", ({ scheduleDate, roleId }) => ({
  url: \`/api/test/schedules\`,
  method: \\"get\\",
  params: {
    scheduleDate,
    roleId,
  },
}));

export const getTeamListByUsingGet = createRequestAction<{
  limit?: number;
  offset?: number;
}>(\\"getTeamListByUsingGet\\", ({ offset, limit }) => ({
  url: \`/api/test/teams\`,
  method: \\"get\\",
  params: {
    offset,
    limit,
  },
}));

export const getUserListByUsingGet = createRequestAction<{
  limit?: number;
  offset?: number;
}>(\\"getUserListByUsingGet\\", ({ offset, limit }) => ({
  url: \`/api/test/users\`,
  method: \\"get\\",
  params: {
    offset,
    limit,
  },
}));

export const updateBookByIdUsingPut = createRequestAction<{
  id: string;
  requestBody: {
    updateBookRequest: IUpdateBookRequest;
  };
}>(\\"updateBookByIdUsingPut\\", ({ id, requestBody }) => ({
  url: \`/api/test/book/\${id}\`,
  method: \\"put\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadAttachmentUsingPost = createRequestAction<
  {
    requestBody: {
      attachment: File;
    };
  },
  IAttachmentBo
>(\\"uploadAttachmentUsingPost\\", ({ requestBody }) => ({
  url: \`/api/test\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export interface IAttachmentBo {
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookDetailVo {
  attachment?: IScheduleVo;
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookVo {
  address?: string;
  price?: string;
}

export interface IBookingResponse {
  data: IDocumentVo;
  errors?: IErrorInfo[];
}

export interface IDocumentVo {
  attachment?: IBookDetailVo;
  authorName?: string;
  createdDate?: number;
  id?: string;
  note?: string;
  title?: string;
}

export interface IError {
  code?: number;
  field?: string;
  message?: string;
}

export interface IErrorInfo {
  errorMessage?: string;
}

export type TErrors = IError[];

export interface IFile {
  absolute?: boolean;
  absoluteFile?: IFile;
  absolutePath?: string;
  canonicalFile?: IFile;
  canonicalPath?: string;
  directory?: boolean;
  executable?: boolean;
  file?: boolean;
  freeSpace?: number;
  hidden?: boolean;
  lastModified?: number;
  name?: string;
  parent?: string;
  parentFile?: IFile;
  path?: string;
  readable?: boolean;
  totalSpace?: number;
  usableSpace?: number;
  writable?: boolean;
}

export enum GetDocumentByIdUsingGetFrom {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export interface IInputStream {
  [key: string]: any;
}

export interface IItem {
  color?: string;
  id?: string;
  name?: string;
  price?: string;
}

export type TItems = IItem[];

export interface IMessage {
  message?: string;
}

export interface IResource {
  description?: string;
  file?: IFile;
  filename?: string;
  inputStream?: IInputStream;
  open?: boolean;
  readable?: boolean;
  uri?: IUri;
  url?: IUrl;
}

export interface IScheduleVo {
  schedules?: IBookVo[][];
  shiftId?: string;
  team?: string;
}

export interface IUpdateBookRequest {
  birthCountry?: string;
  citizenship?: string;
  dateOfBirth?: number;
  employmentStatus?: string;
  ethnicity?: string;
  gender?: string;
  idNumber?: string;
  idType?: string;
  roleId?: string;
  spokenLanguage?: string[];
}

export interface IUri {
  absolute?: boolean;
  authority?: string;
  fragment?: string;
  host?: string;
  opaque?: boolean;
  path?: string;
  port?: number;
  query?: string;
  rawAuthority?: string;
  rawFragment?: string;
  rawPath?: string;
  rawQuery?: string;
  rawSchemeSpecificPart?: string;
  rawUserInfo?: string;
  scheme?: string;
  schemeSpecificPart?: string;
  userInfo?: string;
}

export interface IUrl {
  authority?: string;
  content?: { [key: string]: any };
  defaultPort?: number;
  deserializedFields?: IUrlStreamHandler;
  file?: string;
  host?: string;
  path?: string;
  port?: number;
  protocol?: string;
  query?: string;
  ref?: string;
  serializedHashCode?: number;
  userInfo?: string;
}

export interface IUrlStreamHandler {
  [key: string]: any;
}

export interface IValidationError {
  errors?: TErrors;
  message?: string;
}
"
`;

exports[`swagger v2 should handle special spec correctly 1`] = `
"export const addPet = createRequestAction<{
  requestBody: {
    body?: IPet;
  };
}>(\\"addPet\\", ({ requestBody }) => ({
  url: \`/v2/pet\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUser = createRequestAction<{
  requestBody: {
    body?: IUser;
  };
}>(\\"createUser\\", ({ requestBody }) => ({
  url: \`/v2/user\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithArrayInput = createRequestAction<{
  requestBody: {
    body?: IUser[];
  };
}>(\\"createUsersWithArrayInput\\", ({ requestBody }) => ({
  url: \`/v2/user/createWithArray\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithListInput = createRequestAction<{
  requestBody: {
    body?: IUser[];
  };
}>(\\"createUsersWithListInput\\", ({ requestBody }) => ({
  url: \`/v2/user/createWithList\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deleteOrder = createRequestAction<{
  orderId: string;
}>(\\"deleteOrder\\", ({ orderId }) => ({ url: \`/v2/store/order/\${orderId}\`, method: \\"delete\\" }));

export const deletePet = createRequestAction<{
  petId: number;
}>(\\"deletePet\\", ({ petId }) => ({ url: \`/v2/pet/\${petId}\`, method: \\"delete\\" }));

export const deleteUser = createRequestAction<{
  username: string;
}>(\\"deleteUser\\", ({ username }) => ({ url: \`/v2/user/\${username}\`, method: \\"delete\\" }));

export const findPetsByStatus = createRequestAction<
  {
    status?: string[];
  },
  IPet[]
>(\\"findPetsByStatus\\", ({ status }) => ({
  url: \`/v2/pet/findByStatus\`,
  method: \\"get\\",
  params: {
    status,
  },
}));

export const findPetsByTags = createRequestAction<
  {
    tags?: string[];
  },
  IPet[]
>(\\"findPetsByTags\\", ({ tags }) => ({
  url: \`/v2/pet/findByTags\`,
  method: \\"get\\",
  params: {
    tags,
  },
}));

export const getInventory = createRequestAction<{ [key: string]: any }>(\\"getInventory\\", () => ({
  url: \`/v2/store/inventory\`,
  method: \\"get\\",
}));

export const getOrderById = createRequestAction<
  {
    orderId: string;
  },
  IOrder
>(\\"getOrderById\\", ({ orderId }) => ({ url: \`/v2/store/order/\${orderId}\`, method: \\"get\\" }));

export const getPetById = createRequestAction<
  {
    petId: number;
  },
  IPet
>(\\"getPetById\\", ({ petId }) => ({ url: \`/v2/pet/\${petId}\`, method: \\"get\\" }));

export const getUserByName = createRequestAction<
  {
    username: string;
  },
  IUser
>(\\"getUserByName\\", ({ username }) => ({ url: \`/v2/user/\${username}\`, method: \\"get\\" }));

export const loginUser = createRequestAction<
  {
    password?: string;
    username?: string;
  },
  string
>(\\"loginUser\\", ({ username, password }) => ({
  url: \`/v2/user/login\`,
  method: \\"get\\",
  params: {
    username,
    password,
  },
}));

export const logoutUser = createRequestAction(\\"logoutUser\\", () => ({ url: \`/v2/user/logout\`, method: \\"get\\" }));

export const placeOrder = createRequestAction<
  {
    requestBody: {
      body?: IOrder;
    };
  },
  IOrder
>(\\"placeOrder\\", ({ requestBody }) => ({
  url: \`/v2/store/order\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePet = createRequestAction<{
  requestBody: {
    body?: IPet;
  };
}>(\\"updatePet\\", ({ requestBody }) => ({
  url: \`/v2/pet\`,
  method: \\"put\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePetWithForm = createRequestAction<{
  petId: string;
  requestBody: {
    name?: string;
    status?: string;
  };
}>(\\"updatePetWithForm\\", ({ petId, requestBody }) => ({
  url: \`/v2/pet/\${petId}\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const updateUser = createRequestAction<{
  requestBody: {
    body?: IUser;
  };
  username: string;
}>(\\"updateUser\\", ({ username, requestBody }) => ({
  url: \`/v2/user/\${username}\`,
  method: \\"put\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadFile = createRequestAction<{
  petId: number;
  requestBody: {
    additionalMetadata?: string;
    file?: File;
  };
}>(\\"uploadFile\\", ({ petId, requestBody }) => ({
  url: \`/v2/pet/\${petId}/uploadImage\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export interface IAttachmentBo {
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookDetailVo {
  attachment?: IScheduleVo;
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookVo {
  address?: string;
  price?: string;
}

export interface IBookingResponse {
  data: IDocumentVo;
  errors?: IErrorInfo[];
}

export interface ICategory {
  id?: number;
  name?: string;
}

export interface IDocumentVo {
  attachment?: IBookDetailVo;
  authorName?: string;
  createdDate?: number;
  id?: string;
  note?: string;
  title?: string;
}

export interface IError {
  code?: number;
  field?: string;
  message?: string;
}

export interface IErrorInfo {
  errorMessage?: string;
}

export type TErrors = IError[];

export interface IFile {
  absolute?: boolean;
  absoluteFile?: IFile;
  absolutePath?: string;
  canonicalFile?: IFile;
  canonicalPath?: string;
  directory?: boolean;
  executable?: boolean;
  file?: boolean;
  freeSpace?: number;
  hidden?: boolean;
  lastModified?: number;
  name?: string;
  parent?: string;
  parentFile?: IFile;
  path?: string;
  readable?: boolean;
  totalSpace?: number;
  usableSpace?: number;
  writable?: boolean;
}

export enum GetDocumentByIdUsingGetFrom {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export interface IInputStream {
  [key: string]: any;
}

export interface IItem {
  color?: string;
  id?: string;
  name?: string;
  price?: string;
}

export type TItems = IItem[];

export interface IMessage {
  message?: string;
}

export interface IOrder {
  complete?: boolean;
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  status?: keyof typeof OrderStatus;
}

export enum OrderStatus {
  \\"placed\\" = \\"placed\\",
  \\"approved\\" = \\"approved\\",
  \\"delivered\\" = \\"delivered\\",
}

export interface IPet {
  category?: ICategory;
  id?: number;
  name: string;
  photoUrls: string[];
  status?: keyof typeof PetStatus;
  tags?: ITag[];
}

export enum PetStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export interface IResource {
  description?: string;
  file?: IFile;
  filename?: string;
  inputStream?: IInputStream;
  open?: boolean;
  readable?: boolean;
  uri?: IUri;
  url?: IUrl;
}

export interface IScheduleVo {
  schedules?: IBookVo[][];
  shiftId?: string;
  team?: string;
}

export interface ITag {
  id?: number;
  name?: string;
}

export interface IUpdateBookRequest {
  birthCountry?: string;
  citizenship?: string;
  dateOfBirth?: number;
  employmentStatus?: string;
  ethnicity?: string;
  gender?: string;
  idNumber?: string;
  idType?: string;
  roleId?: string;
  spokenLanguage?: string[];
}

export interface IUri {
  absolute?: boolean;
  authority?: string;
  fragment?: string;
  host?: string;
  opaque?: boolean;
  path?: string;
  port?: number;
  query?: string;
  rawAuthority?: string;
  rawFragment?: string;
  rawPath?: string;
  rawQuery?: string;
  rawSchemeSpecificPart?: string;
  rawUserInfo?: string;
  scheme?: string;
  schemeSpecificPart?: string;
  userInfo?: string;
}

export interface IUrl {
  authority?: string;
  content?: { [key: string]: any };
  defaultPort?: number;
  deserializedFields?: IUrlStreamHandler;
  file?: string;
  host?: string;
  path?: string;
  port?: number;
  protocol?: string;
  query?: string;
  ref?: string;
  serializedHashCode?: number;
  userInfo?: string;
}

export interface IUrlStreamHandler {
  [key: string]: any;
}

export interface IUser {
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  userStatus?: number;
  username?: string;
}

export interface IValidationError {
  errors?: TErrors;
  message?: string;
}
"
`;

exports[`swagger v3 should handle basic schemas correctly 1`] = `
"export const addPet = createRequestAction<
  {
    requestBody: INewPet;
  },
  IPet
>(\\"addPet\\", ({ requestBody }) => ({
  url: \`/pets\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deletePet = createRequestAction<{
  id: number;
}>(\\"deletePet\\", ({ id }) => ({ url: \`/pets/\${id}\`, method: \\"delete\\" }));

export const findPetById = createRequestAction<
  {
    id: number;
  },
  IPet
>(\\"findPetById\\", ({ id }) => ({ url: \`/pets/\${id}\`, method: \\"get\\" }));

export const findPets = createRequestAction<
  {
    limit?: number;
    status: keyof typeof FindPetsStatus[];
    tags?: string[];
  },
  IPet[]
>(\\"findPets\\", ({ tags, limit, status }) => ({
  url: \`/pets\`,
  method: \\"get\\",
  params: {
    tags,
    limit,
    status,
  },
}));

export const updatePet = createRequestAction<{
  requestBody: ICat | IDog;
}>(\\"updatePet\\", ({ requestBody }) => ({
  url: \`/pets\`,
  method: \\"patch\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export interface IAttachmentBo {
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookDetailVo {
  attachment?: IScheduleVo;
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookVo {
  address?: string;
  price?: string;
}

export interface IBookingResponse {
  data: IDocumentVo;
  errors?: IErrorInfo[];
}

export interface ICat extends IPet {
  age?: number;
  hunts?: boolean;
}

export interface ICategory {
  id?: number;
  name?: string;
}

export interface IDocumentVo {
  attachment?: IBookDetailVo;
  authorName?: string;
  createdDate?: number;
  id?: string;
  note?: string;
  title?: string;
}

export interface IDog extends IPet {
  bark?: boolean;
  breed?: keyof typeof DogBreed;
}

export enum DogBreed {
  \\"Dingo\\" = \\"Dingo\\",
  \\"Husky\\" = \\"Husky\\",
  \\"Retriever\\" = \\"Retriever\\",
  \\"Shepherd\\" = \\"Shepherd\\",
}

export interface IError {
  code: number;
  message: string;
}

export interface IErrorInfo {
  errorMessage?: string;
}

export type TErrors = IError[];

export interface IFile {
  absolute?: boolean;
  absoluteFile?: IFile;
  absolutePath?: string;
  canonicalFile?: IFile;
  canonicalPath?: string;
  directory?: boolean;
  executable?: boolean;
  file?: boolean;
  freeSpace?: number;
  hidden?: boolean;
  lastModified?: number;
  name?: string;
  parent?: string;
  parentFile?: IFile;
  path?: string;
  readable?: boolean;
  totalSpace?: number;
  usableSpace?: number;
  writable?: boolean;
}

export enum FindPetsStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export enum GetDocumentByIdUsingGetFrom {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export interface IInputStream {
  [key: string]: any;
}

export interface IItem {
  color?: string;
  id?: string;
  name?: string;
  price?: string;
}

export type TItems = IItem[];

export interface IMessage {
  message?: string;
}

export interface INewPet {
  name: string;
  tag?: string;
}

export interface IOrder {
  complete?: boolean;
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  status?: keyof typeof OrderStatus;
}

export enum OrderStatus {
  \\"placed\\" = \\"placed\\",
  \\"approved\\" = \\"approved\\",
  \\"delivered\\" = \\"delivered\\",
}

export interface IPet extends INewPet {
  categories?: ICategory[];
  id: number;
}

export enum PetStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export type TPets = IPet[];

export interface IResource {
  description?: string;
  file?: IFile;
  filename?: string;
  inputStream?: IInputStream;
  open?: boolean;
  readable?: boolean;
  uri?: IUri;
  url?: IUrl;
}

export interface IScheduleVo {
  schedules?: IBookVo[][];
  shiftId?: string;
  team?: string;
}

export interface ITag {
  id?: number;
  name?: string;
}

export interface IUpdateBookRequest {
  birthCountry?: string;
  citizenship?: string;
  dateOfBirth?: number;
  employmentStatus?: string;
  ethnicity?: string;
  gender?: string;
  idNumber?: string;
  idType?: string;
  roleId?: string;
  spokenLanguage?: string[];
}

export interface IUri {
  absolute?: boolean;
  authority?: string;
  fragment?: string;
  host?: string;
  opaque?: boolean;
  path?: string;
  port?: number;
  query?: string;
  rawAuthority?: string;
  rawFragment?: string;
  rawPath?: string;
  rawQuery?: string;
  rawSchemeSpecificPart?: string;
  rawUserInfo?: string;
  scheme?: string;
  schemeSpecificPart?: string;
  userInfo?: string;
}

export interface IUrl {
  authority?: string;
  content?: { [key: string]: any };
  defaultPort?: number;
  deserializedFields?: IUrlStreamHandler;
  file?: string;
  host?: string;
  path?: string;
  port?: number;
  protocol?: string;
  query?: string;
  ref?: string;
  serializedHashCode?: number;
  userInfo?: string;
}

export interface IUrlStreamHandler {
  [key: string]: any;
}

export interface IUser {
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  userStatus?: number;
  username?: string;
}

export interface IValidationError {
  errors?: TErrors;
  message?: string;
}
"
`;

exports[`swagger v3 should handle special schemas correctly 1`] = `
"export const addPet = createRequestAction<
  {
    requestBody: INewPet;
  },
  TPet
>(\\"addPet\\", ({ requestBody }) => ({
  url: \`/pets\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deletePet = createRequestAction<{
  id: number;
}>(\\"deletePet\\", ({ id }) => ({ url: \`/pets/\${id}\`, method: \\"delete\\" }));

export const findPetById = createRequestAction<
  {
    id: number;
  },
  TPet
>(\\"findPetById\\", ({ id }) => ({ url: \`/pets/\${id}\`, method: \\"get\\" }));

export const findPets = createRequestAction<
  {
    limit?: number;
    tags?: keyof typeof FindPetsTags[];
  },
  TPet[]
>(\\"findPets\\", ({ tags, limit }) => ({
  url: \`/pets\`,
  method: \\"get\\",
  params: {
    tags,
    limit,
  },
}));

export const formMultipartWithFile = createRequestAction<{
  requestBody: { data?: TPet; file: string; slice?: string[]; string?: string };
}>(\\"formMultipartWithFile\\", ({ requestBody }) => ({
  url: \`/demo/forms/multipart\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const formMultipartWithFiles = createRequestAction<{
  requestBody: { files: string[] };
}>(\\"formMultipartWithFiles\\", ({ requestBody }) => ({
  url: \`/demo/forms/multipart-with-files\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const formUrlEncoded = createRequestAction<{
  requestBody: IRequestForm;
}>(\\"formUrlEncoded\\", ({ requestBody }) => ({
  url: \`/demo/forms/url-encoded\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/x-www-form-urlencoded\\" },
}));

export interface IAttachmentBo {
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookDetailVo {
  attachment?: IScheduleVo;
  authorName?: string;
  createdDate?: number;
  fileName?: string;
  id?: string;
  mimeType?: string;
  path?: string;
}

export interface IBookVo {
  address?: string;
  price?: string;
}

export interface IBookingResponse {
  data: IDocumentVo;
  errors?: IErrorInfo[];
}

export interface ICat extends TPet {
  age?: number;
  hunts?: boolean;
}

export interface ICategory {
  id?: number;
  name?: string;
}

export interface IDocumentVo {
  attachment?: IBookDetailVo;
  authorName?: string;
  createdDate?: number;
  id?: string;
  note?: string;
  title?: string;
}

export interface IDog extends TPet {
  bark?: boolean;
  breed?: keyof typeof DogBreed;
}

export enum DogBreed {
  \\"Dingo\\" = \\"Dingo\\",
  \\"Husky\\" = \\"Husky\\",
  \\"Retriever\\" = \\"Retriever\\",
  \\"Shepherd\\" = \\"Shepherd\\",
}

export interface IError {
  code: number;
  message: string;
}

export interface IErrorInfo {
  errorMessage?: string;
}

export type TErrors = IError[];

export interface IFile {
  absolute?: boolean;
  absoluteFile?: IFile;
  absolutePath?: string;
  canonicalFile?: IFile;
  canonicalPath?: string;
  directory?: boolean;
  executable?: boolean;
  file?: boolean;
  freeSpace?: number;
  hidden?: boolean;
  lastModified?: number;
  name?: string;
  parent?: string;
  parentFile?: IFile;
  path?: string;
  readable?: boolean;
  totalSpace?: number;
  usableSpace?: number;
  writable?: boolean;
}

export enum FindPetsStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export enum FindPetsTags {
  \\"z\\" = \\"z\\",
  \\"b\\" = \\"b\\",
  \\"c\\" = \\"c\\",
  \\"a\\" = \\"a\\",
}

export enum GetDocumentByIdUsingGetFrom {
  \\"AAA\\" = \\"AAA\\",
  \\"BBB\\" = \\"BBB\\",
}

export interface IInputStream {
  [key: string]: any;
}

export interface IItem {
  color?: string;
  id?: string;
  name?: string;
  price?: string;
}

export type TItems = IItem[];

export interface IMessage {
  message?: string;
}

export interface INewPet {
  name: string;
  tag?: string;
}

export interface IOrder {
  complete?: boolean;
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  status?: keyof typeof OrderStatus;
}

export enum OrderStatus {
  \\"placed\\" = \\"placed\\",
  \\"approved\\" = \\"approved\\",
  \\"delivered\\" = \\"delivered\\",
}

export type TPet = INewPet & { id: number };

export enum PetStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export type TPets = TPet[];

export interface IRequestForm {
  data: TPet;
  slice: string[];
  string: string;
}

export interface IResource {
  description?: string;
  file?: IFile;
  filename?: string;
  inputStream?: IInputStream;
  open?: boolean;
  readable?: boolean;
  uri?: IUri;
  url?: IUrl;
}

export interface IScheduleVo {
  schedules?: IBookVo[][];
  shiftId?: string;
  team?: string;
}

export interface ITag {
  id?: number;
  name?: string;
}

export interface IUpdateBookRequest {
  birthCountry?: string;
  citizenship?: string;
  dateOfBirth?: number;
  employmentStatus?: string;
  ethnicity?: string;
  gender?: string;
  idNumber?: string;
  idType?: string;
  roleId?: string;
  spokenLanguage?: string[];
}

export interface IUri {
  absolute?: boolean;
  authority?: string;
  fragment?: string;
  host?: string;
  opaque?: boolean;
  path?: string;
  port?: number;
  query?: string;
  rawAuthority?: string;
  rawFragment?: string;
  rawPath?: string;
  rawQuery?: string;
  rawSchemeSpecificPart?: string;
  rawUserInfo?: string;
  scheme?: string;
  schemeSpecificPart?: string;
  userInfo?: string;
}

export interface IUrl {
  authority?: string;
  content?: { [key: string]: any };
  defaultPort?: number;
  deserializedFields?: IUrlStreamHandler;
  file?: string;
  host?: string;
  path?: string;
  port?: number;
  protocol?: string;
  query?: string;
  ref?: string;
  serializedHashCode?: number;
  userInfo?: string;
}

export interface IUrlStreamHandler {
  [key: string]: any;
}

export interface IUser {
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  userStatus?: number;
  username?: string;
}

export interface IValidationError {
  errors?: TErrors;
  message?: string;
}
"
`;
