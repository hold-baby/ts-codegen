// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`swagger v2 should handle special spec correctly 1`] = `
"export const addPet = createRequestAction<{
  requestBody: {
    body?: IPet;
  };
}>(\\"addPet\\", ({ requestBody }) => ({
  url: \`/v2/pet\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUser = createRequestAction<{
  requestBody: {
    body?: IUser;
  };
}>(\\"createUser\\", ({ requestBody }) => ({
  url: \`/v2/user\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithArrayInput = createRequestAction<{
  requestBody: {
    body?: IUser[];
  };
}>(\\"createUsersWithArrayInput\\", ({ requestBody }) => ({
  url: \`/v2/user/createWithArray\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const createUsersWithListInput = createRequestAction<{
  requestBody: {
    body?: IUser[];
  };
}>(\\"createUsersWithListInput\\", ({ requestBody }) => ({
  url: \`/v2/user/createWithList\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const deleteOrder = createRequestAction<{
  orderId: string;
}>(\\"deleteOrder\\", ({ orderId }) => ({ url: \`/v2/store/order/\${orderId}\`, method: \\"delete\\" }));

export const deletePet = createRequestAction<{
  petId: number;
}>(\\"deletePet\\", ({ petId }) => ({ url: \`/v2/pet/\${petId}\`, method: \\"delete\\" }));

export const deleteUser = createRequestAction<{
  username: string;
}>(\\"deleteUser\\", ({ username }) => ({ url: \`/v2/user/\${username}\`, method: \\"delete\\" }));

export const findPetsByStatus = createRequestAction<
  {
    status?: string[];
  },
  IPet[]
>(\\"findPetsByStatus\\", ({ status }) => ({
  url: \`/v2/pet/findByStatus\`,
  method: \\"get\\",
  params: {
    status,
  },
}));

export const findPetsByTags = createRequestAction<
  {
    tags?: string[];
  },
  IPet[]
>(\\"findPetsByTags\\", ({ tags }) => ({
  url: \`/v2/pet/findByTags\`,
  method: \\"get\\",
  params: {
    tags,
  },
}));

export const getInventory = createRequestAction<{ [key: string]: any }>(\\"getInventory\\", () => ({
  url: \`/v2/store/inventory\`,
  method: \\"get\\",
}));

export const getOrderById = createRequestAction<
  {
    orderId: string;
  },
  IOrder
>(\\"getOrderById\\", ({ orderId }) => ({ url: \`/v2/store/order/\${orderId}\`, method: \\"get\\" }));

export const getPetById = createRequestAction<
  {
    petId: number;
  },
  IPet
>(\\"getPetById\\", ({ petId }) => ({ url: \`/v2/pet/\${petId}\`, method: \\"get\\" }));

export const getUserByName = createRequestAction<
  {
    username: string;
  },
  IUser
>(\\"getUserByName\\", ({ username }) => ({ url: \`/v2/user/\${username}\`, method: \\"get\\" }));

export const loginUser = createRequestAction<
  {
    password?: string;
    username?: string;
  },
  string
>(\\"loginUser\\", ({ username, password }) => ({
  url: \`/v2/user/login\`,
  method: \\"get\\",
  params: {
    username,
    password,
  },
}));

export const logoutUser = createRequestAction(\\"logoutUser\\", () => ({ url: \`/v2/user/logout\`, method: \\"get\\" }));

export const placeOrder = createRequestAction<
  {
    requestBody: {
      body?: IOrder;
    };
  },
  IOrder
>(\\"placeOrder\\", ({ requestBody }) => ({
  url: \`/v2/store/order\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePet = createRequestAction<{
  requestBody: {
    body?: IPet;
  };
}>(\\"updatePet\\", ({ requestBody }) => ({
  url: \`/v2/pet\`,
  method: \\"put\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const updatePetWithForm = createRequestAction<{
  petId: string;
  requestBody: {
    name?: string;
    status?: string;
  };
}>(\\"updatePetWithForm\\", ({ petId, requestBody }) => ({
  url: \`/v2/pet/\${petId}\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export const updateUser = createRequestAction<{
  requestBody: {
    body?: IUser;
  };
  username: string;
}>(\\"updateUser\\", ({ username, requestBody }) => ({
  url: \`/v2/user/\${username}\`,
  method: \\"put\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"application/json\\" },
}));

export const uploadFile = createRequestAction<{
  petId: number;
  requestBody: {
    additionalMetadata?: string;
    file?: File;
  };
}>(\\"uploadFile\\", ({ petId, requestBody }) => ({
  url: \`/v2/pet/\${petId}/uploadImage\`,
  method: \\"post\\",
  data: requestBody,
  headers: { \\"Content-Type\\": \\"multipart/form-data\\" },
}));

export interface ICategory {
  id?: number;
  name?: string;
}

export interface IOrder {
  complete?: boolean;
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  status?: keyof typeof OrderStatus;
}

export enum OrderStatus {
  \\"placed\\" = \\"placed\\",
  \\"approved\\" = \\"approved\\",
  \\"delivered\\" = \\"delivered\\",
}

export interface IPet {
  category?: ICategory;
  id?: number;
  name: string;
  photoUrls: string[];
  status?: keyof typeof PetStatus;
  tags?: ITag[];
}

export enum PetStatus {
  \\"available\\" = \\"available\\",
  \\"pending\\" = \\"pending\\",
  \\"sold\\" = \\"sold\\",
}

export interface ITag {
  id?: number;
  name?: string;
}

export interface IUser {
  email?: string;
  firstName?: string;
  id?: number;
  lastName?: string;
  password?: string;
  phone?: string;
  userStatus?: number;
  username?: string;
}
"
`;
